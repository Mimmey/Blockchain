type: edu
custom_name: stage4
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    import blockchain.entities.BlockChain;

    import java.io.InvalidObjectException;

    public class Main {
        public static void main(String[] args) throws InvalidObjectException {
            BlockChain blockChain = new BlockChain();

            for (int i = 0; i < 5; i++) {
                blockChain.addBlock();
            }

            blockChain.validate();
            blockChain.print();
        }
    }
  learner_created: false
- name: src/blockchain/cryptoAlgos/CryptoAlgorithm.java
  visible: true
  text: |
    package blockchain.cryptoAlgos;

    public interface CryptoAlgorithm {
        String hash(String rawValue);
    }
  learner_created: false
- name: src/blockchain/entities/BlockChain.java
  visible: true
  text: |
    package blockchain.entities;

    import java.io.InvalidObjectException;
    import java.util.LinkedList;
    import java.util.List;
    import java.util.Optional;

    public class BlockChain implements BlockChainInterface {
        List<Block> chain;

        public BlockChain() {
            chain = new LinkedList<>();
        }

        @Override
        public void addBlock() {
            Optional<Block> prev = chain.isEmpty() ? Optional.empty() : Optional.of(chain.get(chain.size() - 1));
            chain.add(new Block(prev));
        }

        @Override
        public void validate() throws InvalidObjectException {
            String hashPrev = "0";
            for (Block block : chain) {
                if (!block.getHashPrev().equals(hashPrev)) {
                    throw new InvalidObjectException("Invalid blockchain");
                }

                hashPrev = block.getHash();
            }
        }

        @Override
        public void print() {
            for (Block block : chain) {
                block.print();
                System.out.println();
            }
        }
    }
  learner_created: false
- name: src/blockchain/entities/BlockChainInterface.java
  visible: true
  text: |
    package blockchain.entities;

    import java.io.InvalidObjectException;

    public interface BlockChainInterface {
        void addBlock();
        void validate() throws InvalidObjectException;
        void print();
    }
  learner_created: false
- name: src/blockchain/cryptoAlgos/Sha256.java
  visible: true
  text: |
    package blockchain.cryptoAlgos;

    import jdk.jfr.DataAmount;
    import lombok.NoArgsConstructor;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;

    @NoArgsConstructor
    public class Sha256 implements CryptoAlgorithm {
        @Override
        public String hash(String rawValue) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                byte[] hash = digest.digest(rawValue.getBytes(StandardCharsets.UTF_8));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) {
                        hexString.append('0');
                    }
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 12) {
                throw new BlockParseException("Every block should " +
                    "contain at least 12 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(9).startsWith("Block data:")) {
                throw new BlockParseException("10-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/utils/ProofStatus.java
  visible: true
  text: |
    package blockchain.utils;

    import lombok.Getter;

    @Getter
    public enum ProofStatus {
        STAYS("N stays the same"), INCREASES("N was increased to %d"), DECREASES("N was decreased to %d");

        String output;

        ProofStatus(String output) {
            this.output = output;
        }
    }
  learner_created: true
- name: src/blockchain/entities/MessageCrypto.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/274/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 03 Mar 2022 07:23:45 UTC
record: 4
